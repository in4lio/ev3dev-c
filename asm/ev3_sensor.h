
/*  ev3_sensor.h was generated by yup.py (yupp) 1.0c6
    out of ev3_sensor.yu-h 
 *//**
 *  \file  ev3_sensor.h (ev3_sensor.yu-h)
 *  \brief  EV3 Sensors.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#pragma once

#include "enum-asm.h"

#define SENSOR_DIR  "/sys/class/lego-sensor"  /**< Directory of sensors. */

#define SENSOR_DESC__LIMIT_  DESC_LIMIT  /**< Limit of sensor descriptors. */

#define SENSOR__NONE_  SENSOR_DESC__LIMIT_  /**< Sensor is not found. */

/**
 *  \var EV3_SENSOR ev3_sensor[ SENSOR_DESC__LIMIT_ ]
 *  \brief Vector of sensor descriptors (filled by \ref ev3_sensor_init).
 */
.extern ev3_sensor

/**
 *  \brief Identifiers of sensor types.
 */
ENUM_0  SENSOR_TYPE__NONE_  /* XXX: memset( 0 ) is used */
ENUM_N  EV3_ANALOG_XX
ENUM_N  NXT_ANALOG
ENUM_N  PIXY_LEGO
ENUM_N  DI_DFLEX
ENUM_N  FCL_9DOF
ENUM_N  FCL_ADC
ENUM_N  FCL_ALTITUDE
ENUM_N  FCL_GESTURE
ENUM_N  FCL_HUMIDITY
ENUM_N  FCL_IR
ENUM_N  FCL_LIGHT
ENUM_N  HT_NXT_COLOR
ENUM_N  HT_NXT_ANGLE
ENUM_N  HT_NXT_ACCEL
ENUM_N  HT_NXT_BAROMETRIC
ENUM_N  HT_NXT_COLOR_V2
ENUM_N  HT_NXT_EOPD
ENUM_N  HT_NXT_FORCE
ENUM_N  HT_NXT_GYRO
ENUM_N  HT_NXT_IR_LINK
ENUM_N  HT_NXT_IR_RECEIVER
ENUM_N  HT_NXT_PIR
ENUM_N  HT_NXT_COMPASS
ENUM_N  HT_NXT_MAG
ENUM_N  HT_NXT_IR_SEEK_V2
ENUM_N  HT_NXT_SMUX
ENUM_N  HT_SUPER_PRO
ENUM_N  LEGO_EV3_US
ENUM_N  LEGO_EV3_GYRO
ENUM_N  LEGO_EV3_COLOR
ENUM_N  LEGO_EV3_TOUCH
ENUM_N  LEGO_EV3_IR
ENUM_N  WEDO_HUB
ENUM_N  WEDO_MOTION
ENUM_N  WEDO_TILT
ENUM_N  LEGO_POWER_STORAGE
ENUM_N  LEGO_NXT_TEMP
ENUM_N  LEGO_NXT_TOUCH
ENUM_N  LEGO_NXT_LIGHT
ENUM_N  LEGO_NXT_SOUND
ENUM_N  LEGO_NXT_US
ENUM_N  MI_XG1300L
ENUM_N  MS_ABSOLUTE_IMU
ENUM_N  MS_ANGLE
ENUM_N  MS_EV3_SMUX
ENUM_N  MS_LIGHT_ARRAY
ENUM_N  MS_LINE_LEADER
ENUM_N  MS_NXTCAM
ENUM_N  MS_NXTMMX
ENUM_N  MS_8CH_SERVO
ENUM_N  MS_PPS58_NX
ENUM_N  MS_PIXY_ADAPTER
ENUM_N  MS_NXT_TOUCH_MUX

ENUM_N  SENSOR_TYPE__COUNT_  /**< Count of sensor types. */
ENUM_EQ SENSOR_TYPE__UNKNOWN_, SENSOR_TYPE__COUNT_

/**
 *  \brief Identifiers of sensor "mode" attribute.
 */
ENUM_0  SENSOR_MODE__NONE_

ENUM_N  EV3_ANALOG_XX_ANALOG
			
ENUM_N  NXT_ANALOG_ANALOG_0
			
ENUM_N  NXT_ANALOG_ANALOG_1
			
ENUM_N  PIXY_LEGO_ALL
			
ENUM_N  PIXY_LEGO_SIG1
			
ENUM_N  PIXY_LEGO_SIG2
			
ENUM_N  PIXY_LEGO_SIG3
			
ENUM_N  PIXY_LEGO_SIG4
			
ENUM_N  PIXY_LEGO_SIG5
			
ENUM_N  PIXY_LEGO_SIG6
			
ENUM_N  PIXY_LEGO_SIG7
			
ENUM_N  DI_DFLEX_FLEX
			
ENUM_N  FCL_9DOF_GYRO
			
ENUM_N  FCL_9DOF_ACC
			
ENUM_N  FCL_9DOF_MAGNET
			
ENUM_N  FCL_ADC_CH1_VOLTAGE
			
ENUM_N  FCL_ADC_CH2_VOLTAGE
			
ENUM_N  FCL_ADC_VOLTAGE
			
ENUM_N  FCL_ALTITUDE_PRESSURE
			
ENUM_N  FCL_ALTITUDE_ALTITUDE
			
ENUM_N  FCL_GESTURE_GESTURE
			
ENUM_N  FCL_GESTURE_PROXIMITY
			
ENUM_N  FCL_GESTURE_RGB_RAW
			
ENUM_N  FCL_GESTURE_CLEAR
			
ENUM_N  FCL_HUMIDITY_CENTIGRADE
			
ENUM_N  FCL_HUMIDITY_FAHRENHEIT
			
ENUM_N  FCL_HUMIDITY_HUMIDITY
			
ENUM_N  FCL_IR_IR_DATA
			
ENUM_N  FCL_LIGHT_ILLUMINANCE
			
ENUM_N  HT_NXT_COLOR_COLOR
			
ENUM_N  HT_NXT_COLOR_RED
			
ENUM_N  HT_NXT_COLOR_GREEN
			
ENUM_N  HT_NXT_COLOR_BLUE
			
ENUM_N  HT_NXT_COLOR_RAW
			
ENUM_N  HT_NXT_COLOR_NORM
			
ENUM_N  HT_NXT_COLOR_ALL
			
ENUM_N  HT_NXT_ANGLE_ANGLE
			
ENUM_N  HT_NXT_ANGLE_ANGLE_ACC
			
ENUM_N  HT_NXT_ANGLE_SPEED
			
ENUM_N  HT_NXT_ACCEL_ACCEL
			
ENUM_N  HT_NXT_ACCEL_ALL
			
ENUM_N  HT_NXT_BAROMETRIC_PRESS
			
ENUM_N  HT_NXT_BAROMETRIC_TEMP
			
ENUM_N  HT_NXT_COLOR_V2_COLOR
			
ENUM_N  HT_NXT_COLOR_V2_RED
			
ENUM_N  HT_NXT_COLOR_V2_GREEN
			
ENUM_N  HT_NXT_COLOR_V2_BLUE
			
ENUM_N  HT_NXT_COLOR_V2_WHITE
			
ENUM_N  HT_NXT_COLOR_V2_NORM
			
ENUM_N  HT_NXT_COLOR_V2_ALL
			
ENUM_N  HT_NXT_COLOR_V2_RAW
			
ENUM_N  HT_NXT_EOPD_LONG
			
ENUM_N  HT_NXT_EOPD_SHORT
			
ENUM_N  HT_NXT_FORCE_FORCE
			
ENUM_N  HT_NXT_GYRO_GYRO
			
ENUM_N  HT_NXT_IR_LINK_IRLINK
			
ENUM_N  HT_NXT_IR_RECEIVER_1_MOTOR
			
ENUM_N  HT_NXT_IR_RECEIVER_8_MOTOR
			
ENUM_N  HT_NXT_PIR_PROX
			
ENUM_N  HT_NXT_COMPASS_COMPASS
			
ENUM_N  HT_NXT_MAG_MAG
			
ENUM_N  HT_NXT_IR_SEEK_V2_DC
			
ENUM_N  HT_NXT_IR_SEEK_V2_AC
			
ENUM_N  HT_NXT_IR_SEEK_V2_DC_ALL
			
ENUM_N  HT_NXT_IR_SEEK_V2_AC_ALL
			
ENUM_N  HT_NXT_SMUX_MUX
			
ENUM_N  HT_SUPER_PRO_AIN
			
ENUM_N  HT_SUPER_PRO_DIN
			
ENUM_N  HT_SUPER_PRO_DOUT
			
ENUM_N  HT_SUPER_PRO_DCTRL
			
ENUM_N  HT_SUPER_PRO_STROBE
			
ENUM_N  HT_SUPER_PRO_LED
			
ENUM_N  HT_SUPER_PRO_AOUT_0
			
ENUM_N  HT_SUPER_PRO_AOUT_1
			
ENUM_N  LEGO_EV3_US_US_DIST_CM
ENUM_EQ US_US_DIST_CM, LEGO_EV3_US_US_DIST_CM

ENUM_N  LEGO_EV3_US_US_DIST_IN
ENUM_EQ US_US_DIST_IN, LEGO_EV3_US_US_DIST_IN

ENUM_N  LEGO_EV3_US_US_LISTEN
ENUM_EQ US_US_LISTEN, LEGO_EV3_US_US_LISTEN

ENUM_N  LEGO_EV3_US_US_SI_CM
ENUM_EQ US_US_SI_CM, LEGO_EV3_US_US_SI_CM

ENUM_N  LEGO_EV3_US_US_SI_IN
ENUM_EQ US_US_SI_IN, LEGO_EV3_US_US_SI_IN

ENUM_N  LEGO_EV3_US_US_DC_CM
ENUM_EQ US_US_DC_CM, LEGO_EV3_US_US_DC_CM

ENUM_N  LEGO_EV3_US_US_DC_IN
ENUM_EQ US_US_DC_IN, LEGO_EV3_US_US_DC_IN
		
ENUM_N  LEGO_EV3_GYRO_GYRO_ANG
ENUM_EQ GYRO_GYRO_ANG, LEGO_EV3_GYRO_GYRO_ANG

ENUM_N  LEGO_EV3_GYRO_GYRO_RATE
ENUM_EQ GYRO_GYRO_RATE, LEGO_EV3_GYRO_GYRO_RATE

ENUM_N  LEGO_EV3_GYRO_GYRO_FAS
ENUM_EQ GYRO_GYRO_FAS, LEGO_EV3_GYRO_GYRO_FAS

ENUM_N  LEGO_EV3_GYRO_GYRO_G_AND_A
ENUM_EQ GYRO_GYRO_G_AND_A, LEGO_EV3_GYRO_GYRO_G_AND_A

ENUM_N  LEGO_EV3_GYRO_GYRO_CAL
ENUM_EQ GYRO_GYRO_CAL, LEGO_EV3_GYRO_GYRO_CAL
		
ENUM_N  LEGO_EV3_COLOR_COL_REFLECT
ENUM_EQ COLOR_COL_REFLECT, LEGO_EV3_COLOR_COL_REFLECT

ENUM_N  LEGO_EV3_COLOR_COL_AMBIENT
ENUM_EQ COLOR_COL_AMBIENT, LEGO_EV3_COLOR_COL_AMBIENT

ENUM_N  LEGO_EV3_COLOR_COL_COLOR
ENUM_EQ COLOR_COL_COLOR, LEGO_EV3_COLOR_COL_COLOR

ENUM_N  LEGO_EV3_COLOR_REF_RAW
ENUM_EQ COLOR_REF_RAW, LEGO_EV3_COLOR_REF_RAW

ENUM_N  LEGO_EV3_COLOR_RGB_RAW
ENUM_EQ COLOR_RGB_RAW, LEGO_EV3_COLOR_RGB_RAW

ENUM_N  LEGO_EV3_COLOR_COL_CAL
ENUM_EQ COLOR_COL_CAL, LEGO_EV3_COLOR_COL_CAL
		
ENUM_N  LEGO_EV3_TOUCH_TOUCH
ENUM_EQ TOUCH_TOUCH, LEGO_EV3_TOUCH_TOUCH
		
ENUM_N  LEGO_EV3_IR_IR_PROX
ENUM_EQ IR_IR_PROX, LEGO_EV3_IR_IR_PROX

ENUM_N  LEGO_EV3_IR_IR_SEEK
ENUM_EQ IR_IR_SEEK, LEGO_EV3_IR_IR_SEEK

ENUM_N  LEGO_EV3_IR_IR_REMOTE
ENUM_EQ IR_IR_REMOTE, LEGO_EV3_IR_IR_REMOTE

ENUM_N  LEGO_EV3_IR_IR_REM_A
ENUM_EQ IR_IR_REM_A, LEGO_EV3_IR_IR_REM_A

ENUM_N  LEGO_EV3_IR_IR_S_ALT
ENUM_EQ IR_IR_S_ALT, LEGO_EV3_IR_IR_S_ALT

ENUM_N  LEGO_EV3_IR_IR_CAL
ENUM_EQ IR_IR_CAL, LEGO_EV3_IR_IR_CAL
		
ENUM_N  WEDO_HUB_HUB
			
ENUM_N  WEDO_MOTION_PROX
			
ENUM_N  WEDO_MOTION_RAW
			
ENUM_N  WEDO_TILT_TILT
			
ENUM_N  WEDO_TILT_TILT_AXIS
			
ENUM_N  WEDO_TILT_RAW
			
ENUM_N  LEGO_POWER_STORAGE_IN_VOLT
			
ENUM_N  LEGO_POWER_STORAGE_IN_AMP
			
ENUM_N  LEGO_POWER_STORAGE_OUT_VOLT
			
ENUM_N  LEGO_POWER_STORAGE_OUT_AMP
			
ENUM_N  LEGO_POWER_STORAGE_JOULE
			
ENUM_N  LEGO_POWER_STORAGE_IN_WATT
			
ENUM_N  LEGO_POWER_STORAGE_OUT_WATT
			
ENUM_N  LEGO_POWER_STORAGE_ALL
			
ENUM_N  LEGO_NXT_TEMP_NXT_TEMP_C
			
ENUM_N  LEGO_NXT_TEMP_NXT_TEMP_F
			
ENUM_N  LEGO_NXT_TOUCH_TOUCH
			
ENUM_N  LEGO_NXT_LIGHT_REFLECT
			
ENUM_N  LEGO_NXT_LIGHT_AMBIENT
			
ENUM_N  LEGO_NXT_SOUND_DB
			
ENUM_N  LEGO_NXT_SOUND_DBA
			
ENUM_N  LEGO_NXT_US_US_DIST_CM
			
ENUM_N  LEGO_NXT_US_US_DIST_IN
			
ENUM_N  LEGO_NXT_US_US_SI_CM
			
ENUM_N  LEGO_NXT_US_US_SI_IN
			
ENUM_N  LEGO_NXT_US_US_LISTEN
			
ENUM_N  MI_XG1300L_ANGLE
			
ENUM_N  MI_XG1300L_SPEED
			
ENUM_N  MI_XG1300L_ACCEL
			
ENUM_N  MI_XG1300L_ALL
			
ENUM_N  MS_ABSOLUTE_IMU_TILT
			
ENUM_N  MS_ABSOLUTE_IMU_ACCEL
			
ENUM_N  MS_ABSOLUTE_IMU_COMPASS
			
ENUM_N  MS_ABSOLUTE_IMU_MAG
			
ENUM_N  MS_ABSOLUTE_IMU_GYRO
			
ENUM_N  MS_ABSOLUTE_IMU_ALL
			
ENUM_N  MS_ANGLE_ANGLE
			
ENUM_N  MS_ANGLE_ANGLE2
			
ENUM_N  MS_ANGLE_SPEED
			
ENUM_N  MS_ANGLE_ALL
			
ENUM_N  MS_EV3_SMUX_MUX
			
ENUM_N  MS_LIGHT_ARRAY_CAL
			
ENUM_N  MS_LIGHT_ARRAY_RAW
			
ENUM_N  MS_LINE_LEADER_PID
			
ENUM_N  MS_LINE_LEADER_PID_ALL
			
ENUM_N  MS_LINE_LEADER_CAL
			
ENUM_N  MS_LINE_LEADER_RAW
			
ENUM_N  MS_NXTCAM_TRACK
			
ENUM_N  MS_NXTMMX_STATUS
			
ENUM_N  MS_NXTMMX_STATUS_OLD
			
ENUM_N  MS_8CH_SERVO_V3
			
ENUM_N  MS_8CH_SERVO_OLD
			
ENUM_N  MS_PPS58_NX_RAW
			
ENUM_N  MS_PPS58_NX_ABS_PSI
			
ENUM_N  MS_PPS58_NX_ABS_MBAR
			
ENUM_N  MS_PPS58_NX_ABS_KPA
			
ENUM_N  MS_PPS58_NX_REL_PSI
			
ENUM_N  MS_PPS58_NX_REL_MBAR
			
ENUM_N  MS_PPS58_NX_REL_KPA
			
ENUM_N  MS_PIXY_ADAPTER_TRACK
			
ENUM_N  MS_NXT_TOUCH_MUX_TOUCH_MUX
			
ENUM_N  SENSOR_MODE__COUNT_  /**< Count of sensor "mode" attribute. */
ENUM_EQ SENSOR_MODE__UNKNOWN_, SENSOR_MODE__COUNT_

/**
 *  \brief Identifiers of sensor "command" attribute.
 */
ENUM_0  SENSOR_COMMAND__NONE_

ENUM_N  HT_NXT_ANGLE_RESET
			
ENUM_N  HT_NXT_ANGLE_CAL
			
ENUM_N  HT_NXT_SMUX_HALT
			
ENUM_N  HT_NXT_SMUX_DETECT
			
ENUM_N  HT_NXT_SMUX_RUN
			
ENUM_N  WEDO_HUB_OUT_OFF
			
ENUM_N  WEDO_HUB_OUT_ON
			
ENUM_N  WEDO_HUB_CLEAR_ERR
			
ENUM_N  MI_XG1300L_RESET
			
ENUM_N  MI_XG1300L_ACCEL_2G
			
ENUM_N  MI_XG1300L_ACCEL_4G
			
ENUM_N  MI_XG1300L_ACCEL_8G
			
ENUM_N  MS_ABSOLUTE_IMU_BEGIN_COMP_CAL
			
ENUM_N  MS_ABSOLUTE_IMU_END_COMP_CAL
			
ENUM_N  MS_ABSOLUTE_IMU_ACCEL_2G
			
ENUM_N  MS_ABSOLUTE_IMU_ACCEL_4G
			
ENUM_N  MS_ABSOLUTE_IMU_ACCEL_8G
			
ENUM_N  MS_ABSOLUTE_IMU_ACCEL_16G
			
ENUM_N  MS_ANGLE_RESET
			
ENUM_N  MS_LIGHT_ARRAY_CAL_WHITE
			
ENUM_N  MS_LIGHT_ARRAY_CAL_BLACK
			
ENUM_N  MS_LIGHT_ARRAY_SLEEP
			
ENUM_N  MS_LIGHT_ARRAY_WAKE
			
ENUM_N  MS_LIGHT_ARRAY_60HZ
			
ENUM_N  MS_LIGHT_ARRAY_50HZ
			
ENUM_N  MS_LIGHT_ARRAY_UNIVERSAL
			
ENUM_N  MS_LINE_LEADER_CAL_WHITE
			
ENUM_N  MS_LINE_LEADER_CAL_BLACK
			
ENUM_N  MS_LINE_LEADER_SLEEP
			
ENUM_N  MS_LINE_LEADER_WAKE
			
ENUM_N  MS_LINE_LEADER_INV_COL
			
ENUM_N  MS_LINE_LEADER_RST_COL
			
ENUM_N  MS_LINE_LEADER_SNAP
			
ENUM_N  MS_LINE_LEADER_60HZ
			
ENUM_N  MS_LINE_LEADER_50HZ
			
ENUM_N  MS_LINE_LEADER_UNIVERSAL
			
ENUM_N  MS_NXTCAM_TRACK_ON
			
ENUM_N  MS_NXTCAM_TRACK_OFF
			
ENUM_N  MS_NXTCAM_TRACK_OBJ
			
ENUM_N  MS_NXTCAM_TRACK_LINE
			
ENUM_N  MS_NXTCAM_SORT_SIZE
			
ENUM_N  MS_NXTCAM_SORT_COL
			
ENUM_N  MS_PPS58_NX_ZERO
			
ENUM_N  MS_PIXY_ADAPTER_SORT_SIZE
			
ENUM_N  MS_PIXY_ADAPTER_SORT_COL
			
ENUM_N  SENSOR_COMMAND__COUNT_  /**< Count of sensor "command" attribute. */
ENUM_EQ SENSOR_COMMAND__UNKNOWN_, SENSOR_COMMAND__COUNT_

/**
 *  \fn size_t get_sensor_address( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "address" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_address

/**
 *  \fn size_t get_sensor_bin_data( uint8_t sn, byte *buf, size_t sz )
 *  \brief Read "bin_data" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_bin_data

/**
 *  \fn size_t set_sensor_bin_data( uint8_t sn, byte *value, size_t sz )
 *  \brief Write "bin_data" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
 *  \param sz Size of attribute value.
 *  \return Count of written bytes.
 */
.extern set_sensor_bin_data

/**
 *  \fn size_t multi_set_sensor_bin_data( uint8_t *sn, byte *value, size_t sz )
 *  \brief Write "bin_data" attribute of several sensors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
 *  \param sz Size of attribute value.
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_bin_data

/**
 *  \fn size_t get_sensor_bin_data_format( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "bin_data_format" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_bin_data_format

/**
 *  \fn size_t set_sensor_command( uint8_t sn, char *value )
 *  \brief Write "command" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_sensor_command

/**
 *  \fn size_t multi_set_sensor_command( uint8_t *sn, char *value )
 *  \brief Write "command" attribute of several sensors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_command

/**
 *  \fn size_t get_sensor_commands( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "commands" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_commands

/**
 *  \fn size_t get_sensor_direct( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "direct" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_direct

/**
 *  \fn size_t set_sensor_direct( uint8_t sn, char *value )
 *  \brief Write "direct" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_sensor_direct

/**
 *  \fn size_t multi_set_sensor_direct( uint8_t *sn, char *value )
 *  \brief Write "direct" attribute of several sensors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_direct

/**
 *  \fn size_t get_sensor_decimals( uint8_t sn, dword *buf )
 *  \brief Read "decimals" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_decimals

/**
 *  \fn size_t get_sensor_driver_name( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "driver_name" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_driver_name

/**
 *  \fn size_t get_sensor_fw_version( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "fw_version" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_fw_version

/**
 *  \fn size_t get_sensor_mode( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "mode" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_mode

/**
 *  \fn size_t set_sensor_mode( uint8_t sn, char *value )
 *  \brief Write "mode" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_sensor_mode

/**
 *  \fn size_t multi_set_sensor_mode( uint8_t *sn, char *value )
 *  \brief Write "mode" attribute of several sensors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_mode

/**
 *  \fn size_t get_sensor_modes( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "modes" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_modes

/**
 *  \fn size_t get_sensor_num_values( uint8_t sn, dword *buf )
 *  \brief Read "num_values" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_num_values

/**
 *  \fn size_t get_sensor_poll_ms( uint8_t sn, dword *buf )
 *  \brief Read "poll_ms" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_poll_ms

/**
 *  \fn size_t set_sensor_poll_ms( uint8_t sn, dword value )
 *  \brief Write "poll_ms" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_sensor_poll_ms

/**
 *  \fn size_t multi_set_sensor_poll_ms( uint8_t *sn, dword value )
 *  \brief Write "poll_ms" attribute of several sensors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_poll_ms

/**
 *  \fn size_t get_sensor_units( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "units" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_units

/**
 *  \fn size_t get_sensor_value0( uint8_t sn, float *buf )
 *  \brief Read "value0" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value0

/**
 *  \fn size_t get_sensor_value1( uint8_t sn, float *buf )
 *  \brief Read "value1" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value1

/**
 *  \fn size_t get_sensor_value2( uint8_t sn, float *buf )
 *  \brief Read "value2" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value2

/**
 *  \fn size_t get_sensor_value3( uint8_t sn, float *buf )
 *  \brief Read "value3" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value3

/**
 *  \fn size_t get_sensor_value4( uint8_t sn, float *buf )
 *  \brief Read "value4" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value4

/**
 *  \fn size_t get_sensor_value5( uint8_t sn, float *buf )
 *  \brief Read "value5" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value5

/**
 *  \fn size_t get_sensor_value6( uint8_t sn, float *buf )
 *  \brief Read "value6" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value6

/**
 *  \fn size_t get_sensor_value7( uint8_t sn, float *buf )
 *  \brief Read "value7" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_sensor_value7

/**
 *  \fn size_t get_sensor_text_value( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "text_value" attribute of the sensor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_sensor_text_value

/**
 *  \fn size_t get_sensor_value( uint8_t inx, uint8_t sn, int *buf )
 *  \brief Read "value" attribute of the sensor.
 *  \param inx Attribute index.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
	 
 *  \return Count of read bytes.
 */
.extern get_sensor_value

/**
 *  \fn const char *ev3_sensor_type( INX_T type_inx )
 *  \brief Get name of the specified sensor type.
 *  \param type_inx Index of the sensor type.
 *  \return Requested value.
 */
.extern ev3_sensor_type

/**
 *  \fn INX_T get_sensor_type_inx( uint8_t sn )
 *  \brief Read "driver_name" attribute and get index of the sensor type.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern get_sensor_type_inx

/**
 *  \fn size_t get_sensor_desc( uint8_t sn, EV3_SENSOR *desc )
 *  \brief Read sensor attributes that are required for filling the descriptor.
 *  \param sn Sequence number.
 *  \param desc Buffer for the descriptor.
 *  \return Count of read bytes.
 */
.extern get_sensor_desc

/**
 *  \fn EV3_SENSOR *ev3_sensor_desc( uint8_t sn )
 *  \brief Get descriptor of the sensor.
 *  \param sn Sequence number.
 *  \return Pointer to the sensor descriptor.
 */
.extern ev3_sensor_desc

/**
 *  \fn INX_T ev3_sensor_desc_type_inx( uint8_t sn )
 *  \brief Get type from the sensor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_sensor_desc_type_inx

/**
 *  \fn uint8_t ev3_sensor_desc_port( uint8_t sn )
 *  \brief Get EV3 port from the sensor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_sensor_desc_port

/**
 *  \fn uint8_t ev3_sensor_desc_extport( uint8_t sn )
 *  \brief Get extended port from the sensor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_sensor_desc_extport

/**
 *  \fn uint8_t ev3_sensor_desc_addr( uint8_t sn )
 *  \brief Get I2C address from the sensor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_sensor_desc_addr

/**
 *  \fn char *ev3_sensor_port_name( uint8_t sn, char *buf )
 *  \brief Assemble EV3 port name from the sensor descriptor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \return Requested value.
 */
.extern ev3_sensor_port_name

/**
 *  \fn bool ev3_search_sensor( INX_T type_inx, uint8_t *sn, uint8_t from )
 *  \brief Search of a sequence number of the specified sensor type.
 *  \param type_inx Sensor type.
 *  \param[out] sn Buffer for the sequence number.
 *  \param from Search initial value.
 *  \return Flag - the sensor is found.
 */
.extern ev3_search_sensor

/**
 *  \fn bool ev3_search_sensor_plugged_in( uint8_t port, uint8_t extport, uint8_t *sn, uint8_t from )
 *  \brief Search of a sequence number the sensor by plug-in attributes.
 *  \param port EV3 port.
 *  \param extport Extended port.
 *  \param[out] sn Buffer for the sequence number.
 *  \param from Search initial value.
 *  \return Flag - the sensor is found.
 */
.extern ev3_search_sensor_plugged_in

/**
 *  \fn const char *ev3_sensor_mode( INX_T mode_inx )
 *  \brief Get name of the specified sensor mode.
 *  \param mode_inx Index of the sensor mode.
 *  \return Requested value.
 */
.extern ev3_sensor_mode

/**
 *  \fn INX_T get_sensor_mode_inx_of_type( uint8_t sn, INX_T type_inx )
 *  \brief Read "mode" attribute of the specified sensor type and get the index.
 *  \param sn Sequence number.
 *  \param type_inx Index of the sensor type.
 *  \return Requested value.
 */
.extern get_sensor_mode_inx_of_type

/**
 *  \fn INX_T get_sensor_mode_inx( uint8_t sn )
 *  \brief Read "mode" attribute of the sensor and get the index.
 *  \param sn Sequence number.
 *  \return Requested value.
 *
 *  This function gets type of the sensor from the descriptor.
 */
.extern get_sensor_mode_inx

/**
 *  \fn size_t set_sensor_mode_inx( uint8_t sn, INX_T mode_inx )
 *  \brief Write "mode" attribute of the sensor by the index.
 *  \param sn Sequence number.
 *  \param mode_inx Index of the sensor mode.
 *  \return Count of written bytes.
 */
.extern set_sensor_mode_inx

/**
 *  \fn size_t multi_set_sensor_mode_inx( uint8_t *sn, INX_T mode_inx )
 *  \brief Write "mode" attribute of several sensors by the index.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param mode_inx Index of the sensor mode.
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_mode_inx

/**
 *  \fn const char *ev3_sensor_command( INX_T command_inx )
 *  \brief Get name of the specified sensor command.
 *  \param command_inx Index of the sensor command.
 *  \return Requested value.
 */
.extern ev3_sensor_command

/**
 *  \fn size_t set_sensor_command_inx( uint8_t sn, INX_T command_inx )
 *  \brief Write "command" attribute of the sensor by the index.
 *  \param sn Sequence number.
 *  \param command_inx Index of the sensor command.
 *  \return Count of written bytes.
 */
.extern set_sensor_command_inx

/**
 *  \fn size_t multi_set_sensor_command_inx( uint8_t *sn, INX_T command_inx )
 *  \brief Write "command" attribute of several sensors by the index.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param command_inx Index of the sensor command.
 *  \return Count of written bytes.
 */
.extern multi_set_sensor_command_inx

/**
 *  \fn int ev3_sensor_init( void )
 *  \brief Detect connected sensors.
 *  \return Number of found sensors or -1 in case of an error.
 */
.extern ev3_sensor_init

/**
 *  \brief Identifiers of LEGO_EV3_IR sensor values for IR_REMOTE mode.
 */
ENUM_0  IR_REMOTE__NONE_
ENUM_N  RED_UP
ENUM_N  RED_DOWN
ENUM_N  BLUE_UP
ENUM_N  BLUE_DOWN
ENUM_N  RED_UP_BLUE_UP
ENUM_N  RED_UP_BLUE_DOWN
ENUM_N  RED_DOWN_BLUE_UP
ENUM_N  RED_DOWN_BLUE_DOWN
ENUM_N  BEACON_MODE_ON
ENUM_N  RED_UP_RED_DOWN
ENUM_N  BLUE_UP_BLUE_DOWN
