
/*  ev3_dc.h was generated by yup.py (yupp) 1.0c6
    out of ev3_dc.yu-h 
 *//**
 *  \file  ev3_dc.h (ev3_dc.yu-h)
 *  \brief  EV3 DC Motors.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#pragma once

#include "enum-asm.h"

#define DC_DIR  "/sys/class/dc-motor"  /**< Directory of DC motors. */

#define DC_DESC__LIMIT_  DESC_LIMIT  /**< Limit of DC motor descriptors. */

#define DC__NONE_  DC_DESC__LIMIT_  /**< DC motor is not found. */

/**
 *  \var EV3_DC ev3_dc[ DC_DESC__LIMIT_ ]
 *  \brief Vector of DC motor descriptors (filled by \ref ev3_dc_init).
 */
.extern ev3_dc

/**
 *  \brief Identifiers of DC motor types.
 */
ENUM_0  DC_TYPE__NONE_  /* XXX: memset( 0 ) is used */
ENUM_N  RCX_MOTOR

ENUM_N  DC_TYPE__COUNT_  /**< Count of DC motor types. */
ENUM_EQ DC_TYPE__UNKNOWN_, DC_TYPE__COUNT_

/**
 *  \brief Common identifiers of DC motor "command" attribute.
 */
ENUM_0  DC_COMMAND__NONE_

ENUM_N  DC_RUN_FOREVER
ENUM_N  DC_RUN_TIMED
ENUM_N  DC_RUN_DIRECT
ENUM_N  DC_STOP

ENUM_N  DC_COMMAND__COUNT_  /**< Count of DC motor "command" attribute. */
ENUM_EQ DC_COMMAND__UNKNOWN_, DC_COMMAND__COUNT_

/**
 *  \brief Common identifiers of DC motor "polarity" attribute.
 */
ENUM_0  DC_POLARITY__NONE_

ENUM_N  DC_NORMAL
ENUM_N  DC_INVERSED

ENUM_N  DC_POLARITY__COUNT_  /**< Count of DC motor "polarity" attribute. */
ENUM_EQ DC_POLARITY__UNKNOWN_, DC_POLARITY__COUNT_

/**
 *  \brief Common identifiers of DC motor "stop_action" attribute.
 */
ENUM_0  DC_STOP_ACTION__NONE_

ENUM_N  DC_COAST
ENUM_N  DC_BRAKE

ENUM_N  DC_STOP_ACTION__COUNT_  /**< Count of DC motor "stop_action" attribute. */
ENUM_EQ DC_STOP_ACTION__UNKNOWN_, DC_STOP_ACTION__COUNT_

/**
 *  \brief Common identifiers of DC motor "state" attribute.
 */
ENUM_0  DC_STATE__NONE_

ENUM_EQ DC_RUNNING, 0x1
ENUM_EQ DC_RAMPING, 0x2

/**
 *  \fn size_t get_dc_address( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "address" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_dc_address

/**
 *  \fn size_t set_dc_command( uint8_t sn, char *value )
 *  \brief Write "command" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_command

/**
 *  \fn size_t multi_set_dc_command( uint8_t *sn, char *value )
 *  \brief Write "command" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_command

/**
 *  \fn size_t get_dc_commands( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "commands" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_dc_commands

/**
 *  \fn size_t get_dc_driver_name( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "driver_name" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_dc_driver_name

/**
 *  \fn size_t get_dc_duty_cycle( uint8_t sn, int *buf )
 *  \brief Read "duty_cycle" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_dc_duty_cycle

/**
 *  \fn size_t get_dc_duty_cycle_sp( uint8_t sn, int *buf )
 *  \brief Read "duty_cycle_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_dc_duty_cycle_sp

/**
 *  \fn size_t set_dc_duty_cycle_sp( uint8_t sn, int value )
 *  \brief Write "duty_cycle_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_duty_cycle_sp

/**
 *  \fn size_t multi_set_dc_duty_cycle_sp( uint8_t *sn, int value )
 *  \brief Write "duty_cycle_sp" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_duty_cycle_sp

/**
 *  \fn size_t get_dc_polarity( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "polarity" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_dc_polarity

/**
 *  \fn size_t set_dc_polarity( uint8_t sn, char *value )
 *  \brief Write "polarity" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_polarity

/**
 *  \fn size_t multi_set_dc_polarity( uint8_t *sn, char *value )
 *  \brief Write "polarity" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_polarity

/**
 *  \fn size_t get_dc_state( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "state" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_dc_state

/**
 *  \fn size_t set_dc_stop_action( uint8_t sn, char *value )
 *  \brief Write "stop_action" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_stop_action

/**
 *  \fn size_t multi_set_dc_stop_action( uint8_t *sn, char *value )
 *  \brief Write "stop_action" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_stop_action

/**
 *  \fn size_t get_dc_stop_actions( uint8_t sn, char *buf, size_t sz )
 *  \brief Read "stop_actions" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_dc_stop_actions

/**
 *  \fn size_t get_dc_ramp_down_sp( uint8_t sn, int *buf )
 *  \brief Read "ramp_down_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_dc_ramp_down_sp

/**
 *  \fn size_t set_dc_ramp_down_sp( uint8_t sn, int value )
 *  \brief Write "ramp_down_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_ramp_down_sp

/**
 *  \fn size_t multi_set_dc_ramp_down_sp( uint8_t *sn, int value )
 *  \brief Write "ramp_down_sp" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_ramp_down_sp

/**
 *  \fn size_t get_dc_ramp_up_sp( uint8_t sn, int *buf )
 *  \brief Read "ramp_up_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_dc_ramp_up_sp

/**
 *  \fn size_t set_dc_ramp_up_sp( uint8_t sn, int value )
 *  \brief Write "ramp_up_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_ramp_up_sp

/**
 *  \fn size_t multi_set_dc_ramp_up_sp( uint8_t *sn, int value )
 *  \brief Write "ramp_up_sp" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_ramp_up_sp

/**
 *  \fn size_t get_dc_time_sp( uint8_t sn, int *buf )
 *  \brief Read "time_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_dc_time_sp

/**
 *  \fn size_t set_dc_time_sp( uint8_t sn, int value )
 *  \brief Write "time_sp" attribute of the DC motor.
 *  \param sn Sequence number.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern set_dc_time_sp

/**
 *  \fn size_t multi_set_dc_time_sp( uint8_t *sn, int value )
 *  \brief Write "time_sp" attribute of several DC motors.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param value Attribute value.
		 
 *  \return Count of written bytes.
 */
.extern multi_set_dc_time_sp

/**
 *  \fn const char *ev3_dc_type( INX_T type_inx )
 *  \brief Get name of the specified DC motor type.
 *  \param type_inx Index of the DC motor type.
 *  \return Requested value.
 */
.extern ev3_dc_type

/**
 *  \fn INX_T get_dc_type_inx( uint8_t sn )
 *  \brief Read "driver_name" attribute and get index of the DC motor type.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern get_dc_type_inx

/**
 *  \fn size_t get_dc_desc( uint8_t sn, EV3_DC *desc )
 *  \brief Read DC motor attributes that are required for filling the descriptor.
 *  \param sn Sequence number.
 *  \param desc Buffer for the descriptor.
 *  \return Count of read bytes.
 */
.extern get_dc_desc

/**
 *  \fn EV3_DC *ev3_dc_desc( uint8_t sn )
 *  \brief Get descriptor of the DC motor.
 *  \param sn Sequence number.
 *  \return Pointer to the DC motor descriptor.
 */
.extern ev3_dc_desc

/**
 *  \fn INX_T ev3_dc_desc_type_inx( uint8_t sn )
 *  \brief Get type from the DC motor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_dc_desc_type_inx

/**
 *  \fn uint8_t ev3_dc_desc_port( uint8_t sn )
 *  \brief Get EV3 port from the DC motor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_dc_desc_port

/**
 *  \fn uint8_t ev3_dc_desc_extport( uint8_t sn )
 *  \brief Get extended port from the DC motor descriptor.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern ev3_dc_desc_extport

/**
 *  \fn char *ev3_dc_port_name( uint8_t sn, char *buf )
 *  \brief Assemble EV3 port name from the DC motor descriptor.
 *  \param sn Sequence number.
 *  \param[out] buf Buffer for result.
 *  \return Requested value.
 */
.extern ev3_dc_port_name

/**
 *  \fn bool ev3_search_dc( INX_T type_inx, uint8_t *sn, uint8_t from )
 *  \brief Search of a sequence number of the specified DC motor type.
 *  \param type_inx DC motor type.
 *  \param[out] sn Buffer for the sequence number.
 *  \param from Search initial value.
 *  \return Flag - the DC motor is found.
 */
.extern ev3_search_dc

/**
 *  \fn bool ev3_search_dc_plugged_in( uint8_t port, uint8_t extport, uint8_t *sn, uint8_t from )
 *  \brief Search of a sequence number the DC motor by plug-in attributes.
 *  \param port EV3 port.
 *  \param extport Extended port.
 *  \param[out] sn Buffer for the sequence number.
 *  \param from Search initial value.
 *  \return Flag - the DC motor is found.
 */
.extern ev3_search_dc_plugged_in

/**
 *  \fn const char *ev3_dc_command( INX_T command_inx )
 *  \brief Get name of the specified DC motor command.
 *  \param command_inx Index of the DC motor command.
 *  \return Requested value.
 */
.extern ev3_dc_command

/**
 *  \fn size_t set_dc_command_inx( uint8_t sn, INX_T command_inx )
 *  \brief Write "command" attribute of the DC motor by the index.
 *  \param sn Sequence number.
 *  \param command_inx Index of the DC motor command.
 *  \return Count of written bytes.
 */
.extern set_dc_command_inx

/**
 *  \fn size_t multi_set_dc_command_inx( uint8_t *sn, INX_T command_inx )
 *  \brief Write "command" attribute of several DC motors by the index.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param command_inx Index of the DC motor command.
 *  \return Count of written bytes.
 */
.extern multi_set_dc_command_inx

/**
 *  \fn const char *ev3_dc_polarity( INX_T polarity_inx )
 *  \brief Get name of the specified DC motor polarity.
 *  \param polarity_inx Index of the DC motor polarity.
 *  \return Requested value.
 */
.extern ev3_dc_polarity

/**
 *  \fn INX_T get_dc_polarity_inx( uint8_t sn )
 *  \brief Read "polarity" attribute of the DC motor and get the index.
 *  \param sn Sequence number.
 *  \return Requested value.
 */
.extern get_dc_polarity_inx

/**
 *  \fn size_t set_dc_polarity_inx( uint8_t sn, INX_T polarity_inx )
 *  \brief Write "polarity" attribute of the DC motor by the index.
 *  \param sn Sequence number.
 *  \param polarity_inx Index of the DC motor polarity.
 *  \return Count of written bytes.
 */
.extern set_dc_polarity_inx

/**
 *  \fn size_t multi_set_dc_polarity_inx( uint8_t *sn, INX_T polarity_inx )
 *  \brief Write "polarity" attribute of several DC motors by the index.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param polarity_inx Index of the DC motor polarity.
 *  \return Count of written bytes.
 */
.extern multi_set_dc_polarity_inx

/**
 *  \fn const char *ev3_dc_stop_action( INX_T stop_action_inx )
 *  \brief Get name of the specified DC motor stop_action.
 *  \param stop_action_inx Index of the DC motor stop_action.
 *  \return Requested value.
 */
.extern ev3_dc_stop_action

/**
 *  \fn size_t set_dc_stop_action_inx( uint8_t sn, INX_T stop_action_inx )
 *  \brief Write "stop_action" attribute of the DC motor by the index.
 *  \param sn Sequence number.
 *  \param stop_action_inx Index of the DC motor stop_action.
 *  \return Count of written bytes.
 */
.extern set_dc_stop_action_inx

/**
 *  \fn size_t multi_set_dc_stop_action_inx( uint8_t *sn, INX_T stop_action_inx )
 *  \brief Write "stop_action" attribute of several DC motors by the index.
 *  \param sn Vector of sequence numbers ending with DESC_LIMIT.
 *  \param stop_action_inx Index of the DC motor stop_action.
 *  \return Count of written bytes.
 */
.extern multi_set_dc_stop_action_inx

/**
 *  \fn size_t get_dc_state_flags( uint8_t sn, FLAGS_T *flags )
 *  \brief Read "state" attribute of the DC motor and get the flags.
 *  \param sn Sequence number.
 *  \param flags Buffer for the flags.
 *  \return Count of read bytes.
 */
.extern get_dc_state_flags

/**
 *  \fn int ev3_dc_init( void )
 *  \brief Detect connected DC motors.
 *  \return Number of found DC motors or -1 in case of an error.
 */
.extern ev3_dc_init

