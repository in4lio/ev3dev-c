
/*  ev3_led.h was generated by yup.py (yupp) 1.0c6
    out of ev3_led.yu-h 
 *//**
 *  \file  ev3_led.h (ev3_led.yu-h)
 *  \brief  EV3 LEDs.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#pragma once

/**
 *  \brief Identifiers of LEDs.
 */
.set ENUM_COUNTER, 0
.equiv EV3_LEFT_GREEN, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv EV3_RIGHT_GREEN, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv EV3_LEFT_RED, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv EV3_RIGHT_RED, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv LED_OUTA, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv LED_OUTB, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv LED_OUTC, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv LED_OUTD, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1

.equiv LED__COUNT_, ENUM_COUNTER  /**< Count of EV3 LEDs. */

/**
 *  \brief Triggers identifiers of LEDs.
 */
.set ENUM_COUNTER, 0
.equiv TRIGGER_NONE, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_MMC0, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_TIMER, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_HEARTBEAT, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_DEFAULT_ON, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_TRANSIENT, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_LEGOEV3_BATTERY_CHARGING_OR_FULL, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_LEGOEV3_BATTERY_CHARGING, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_LEGOEV3_BATTERY_FULL, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_LEGOEV3_BATTERY_CHARGING_BLINK_FULL_SOLID, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_RFKILL0, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_PHY0RX, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_PHY0TX, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_PHY0ASSOC, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_PHY0RADIO, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1
.equiv TRIGGER_RFKILL1, ENUM_COUNTER
.set ENUM_COUNTER, ENUM_COUNTER + 1

.equiv TRIGGER__COUNT_, ENUM_COUNTER  /**< Count of EV3 triggers. */
};

#define LED_ATTR__COUNT_ 5

/**
 *  \fn size_t get_led_brightness( uint8_t inx, byte *buf )
 *  \brief Read "brightness" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_led_brightness

/**
 *  \fn size_t set_led_brightness( uint8_t inx, byte value )
 *  \brief Write "brightness" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param value Attribute value.
 *  \return Count of written bytes.
 */
.extern set_led_brightness

/**
 *  \fn size_t get_led_delay_off( uint8_t inx, int *buf )
 *  \brief Read "delay_off" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_led_delay_off

/**
 *  \fn size_t set_led_delay_off( uint8_t inx, int value )
 *  \brief Write "delay_off" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param value Attribute value.
 *  \return Count of written bytes.
 */
.extern set_led_delay_off

/**
 *  \fn size_t get_led_delay_on( uint8_t inx, int *buf )
 *  \brief Read "delay_on" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_led_delay_on

/**
 *  \fn size_t set_led_delay_on( uint8_t inx, int value )
 *  \brief Write "delay_on" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param value Attribute value.
 *  \return Count of written bytes.
 */
.extern set_led_delay_on

/**
 *  \fn size_t get_led_max_brightness( uint8_t inx, byte *buf )
 *  \brief Read "max_brightness" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param[out] buf Buffer for result.
		 
 *  \return Count of read bytes.
 */
.extern get_led_max_brightness

/**
 *  \fn size_t get_led_trigger( uint8_t inx, char *buf, size_t sz )
 *  \brief Read "trigger" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param[out] buf Buffer for result.
 *  \param sz Buffer size.
 *  \return Count of read bytes.
 */
.extern get_led_trigger

/**
 *  \fn size_t set_led_trigger( uint8_t inx, char *value )
 *  \brief Write "trigger" attribute of the LED.
 *  \param inx Index of the LED.
 *  \param value Attribute value.
 *  \return Count of written bytes.
 */
.extern set_led_trigger

/**
 *  \fn INX_T get_led_trigger_inx( uint8_t inx )
 *  \brief Read "trigger" attribute of the LED and get the index.
 *  \param inx Index of the LED.
 *  \return Index of trigger or TRIGGER__COUNT_ - error has occurred.
 */
.extern get_led_trigger_inx

/**
 *  \fn size_t set_led_trigger_inx( uint8_t inx, INX_T trigger_inx )
 *  \brief Write "trigger" attribute of the LED by the index.
 *  \param inx Index of the LED.
 *  \param trigger_inx Index of the trigger.
 *  \return Count of written bytes.
 */
.extern set_led_trigger_inx

/**
 *  \fn const char *ev3_led_trigger( INX_T trigger_inx )
 *  \brief Get name of the specified LED trigger.
 *  \param trigger_inx Index of the trigger.
 *  \return Requested value.
 */
.extern ev3_led_trigger
